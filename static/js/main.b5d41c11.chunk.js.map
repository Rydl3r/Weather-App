{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","href","rel","src","alt","placeholder","value","onChange","e","target","onKeyPress","evt","key","fetch","encodeURIComponent","trim","then","res","json","result","console","log","main","name","sys","country","d","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","description","temp","wind","speed","pressure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8OAGMA,G,MACC,oCADDA,EAEE,2CAmEOC,MAhEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA0Bb,OACE,yBAAKC,UAAU,OACb,0BAAMC,KAAK,mEAAmEC,IAAI,eAClF,yBAAKF,UAAU,SACb,yBAAKG,IAAI,+EAA+EC,IAAI,GAAGJ,UAAU,cACzG,yBAAKA,UAAU,cAAf,eAEF,yBAAKA,UAAU,aAAf,2CACA,2BAAOK,YAAY,qBAAqBL,UAAU,aAAaM,MAAOV,EAAOW,SAAU,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOH,QAAQI,WA9B3G,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBqB,mBAAmBlB,EAAMmB,QAAlD,+BAAgFtB,IAClFuB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJpB,EAAWoB,GACXtB,EAAS,IACTuB,QAAQC,IAAIF,SAwBS,oBAAhBrB,EAAQwB,KACf,yBAAKtB,UAAU,UACb,yBAAKA,UAAU,aACb,6BAAMF,EAAQyB,KAAd,KAAsBzB,EAAQ0B,IAAIC,UAEpC,yBAAKzB,UAAU,QAxBH,SAAC0B,GACnB,IACIC,EAAOD,EAAEE,UACTC,EAFS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEzGH,EAAEI,YACjBC,EAAOL,EAAEM,cAEb,MAAM,GAAN,OAAUL,EAAV,YAAkBE,EAAlB,YAA2BE,GAmBpBE,CAAY,IAAIC,OAEjB,yBAAKlC,UAAU,WAAf,sBACmB,6BACrB,2BAAIF,EAAQA,QAAQ,GAAGqC,cAErB,yBAAKnC,UAAU,QAAf,eACY,6BAAS,2BAAIF,EAAQwB,KAAKc,KAAjB,UAErB,yBAAKpC,UAAU,QAAf,QACK,6BACP,2BAAIF,EAAQuC,KAAKC,MAAjB,aAEE,yBAAKtC,UAAU,YAAf,YACS,6BACX,2BAAIF,EAAQwB,KAAKiB,YAGd,KCvDSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.b5d41c11.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst api = {\n  key: \"473d1ee43c0e104fb437f7a5e0e8ecd4\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${encodeURIComponent(query.trim())}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${date} ${month} ${year}`\n  }\n\n\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css2?family=Fjalla+One&display=swap\" rel=\"stylesheet\"></link>\n      <div className=\"title\">\n        <img src=\"https://i.pinimg.com/originals/77/0b/80/770b805d5c99c7931366c2e84e88f251.png\" alt=\"\" className=\"title_img\"/>\n        <div className=\"title_text\">WeatherApp</div>\n      </div>\n      <div className=\"sub_title\">Get Weather for your city on one click!</div>\n      <input placeholder=\"Enter your city...\" className=\"city_input\" value={query} onChange={e => setQuery(e.target.value)} onKeyPress={search}></input>\n      {(typeof weather.main != \"undefined\") ? (\n        <div className=\"result\">\n          <div className=\"city_name\">\n            <div>{weather.name}, {weather.sys.country}</div>\n          </div>\n          <div className=\"date\">\n          {dateBuilder(new Date())}\n          </div>\n          <div className=\"general\">\n          General Prediction <br></br>\n        <b>{weather.weather[0].description}</b>\n          </div>\n          <div className=\"temp\">\n          Temperature <br></br><b>{weather.main.temp}Â°C</b>\n          </div>\n          <div className=\"wind\">\n          Wind <br></br>\n        <b>{weather.wind.speed} km/hour</b>\n          </div>\n          <div className=\"pressure\">\n          Pressure <br></br>\n        <b>{weather.main.pressure}</b>\n          </div>\n        </div>\n      ) : ('')}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}